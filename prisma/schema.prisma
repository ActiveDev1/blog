// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  name           String
  email          String         @unique
  username       String         @unique
  password       String?
  profile        Profile?
  posts          Post[]
  posts_likes    Post_Like[]
  posts_comments Post_Comment[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
}

model Profile {
  id     String  @id @default(cuid())
  bio    String?
  avatar String?
  cover  String?
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String  @unique
}

model Post {
  id          String         @id @default(cuid())
  title       String
  body        String         @db.Text()
  description String?
  slug        String         @unique
  cover       String?
  isPublished Boolean        @default(false)
  author      User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  likes       Post_Like[]
  comments    Post_Comment[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?
}

model Post_Like {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  @@id([userId, postId])
}

model Post_Comment {
  id          String         @id @default(cuid())
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  post        Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String
  content     String         @db.Text()
  subComments Post_Comment[] @relation("Comment_Children")
  parent      Post_Comment?  @relation("Comment_Children", fields: [parentId], references: [id])
  parentId    String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}
