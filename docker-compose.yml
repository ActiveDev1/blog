version: '3.8'

# Uncomment if requirepass is set
services:
  redis:
    container_name: redis
    image: redis:7.0.2-alpine
    # command: ['redis-server', '--appendonly', 'yes', '--include /usr/local/etc/redis/redis.conf']
    volumes:
      - ./services/redis/db-data:/data
      # - ./services/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - '6379:6379'
    networks:
      - backend
    restart: always

  mysql:
    image: mysql:8.0.28
    restart: always
    container_name: mysql
    environment:
      MYSQL_USER: root
      MYSQL_ROOT_PASSWORD: ''
      MYSQL_ALLOW_EMPTY_PASSWORD: 'true'
    ports:
      - '3306:3306'
    expose:
      - '3306'
    volumes:
      - ./services/mysql:/var/lib/mysql
    networks:
      - backend

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    links:
      - mysql
    environment:
      PMA_HOST: mysql
      MYSQL_ROOT_PASSWORD: ''
    restart: always
    ports:
      - '8080:80'
    networks:
      - backend

  minio:
    image: minio/minio:RELEASE.2022-06-25T15-50-16Z
    command: server /data --address ":9000" --console-address ":9001"
    container_name: minio
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_SSL: 'false'
    networks:
      - backend
    volumes:
      - ./services/minio:/data

  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    network_mode: host
    volumes:
      - ./services/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./services/nginx/conf.d/:/etc/nginx/conf.d
    restart: always

  blog-dev-service:
    build:
      context: .
      target: development
      dockerfile: ./Dockerfile
    image: blog-dev-service:latest
    container_name: blog-dev-service
    command: npm run start:debug
    restart: always
    ports:
      - 3010:3000
    networks:
      - backend
    depends_on:
      - mysql
      - redis
      - minio
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      - REDIS_HOST=redis
      - MINIO_ENDPOINT=minio

  blog-prod-service:
    build:
      context: .
      target: production
      dockerfile: ./Dockerfile
    image: blog-prod-service:latest
    command: npm run start:prod
    restart: unless-stopped
    ports:
      - '3000-3003:3000'
    networks:
      - backend
    depends_on:
      - mysql
      - redis
      - minio
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      - REDIS_HOST=redis
      - MINIO_ENDPOINT=minio

networks:
  backend:
    name: backend
